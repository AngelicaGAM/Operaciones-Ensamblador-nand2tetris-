//Chip ALU4-C (segundo ALU, que recibe carry del primer ALU de 4bits)

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU4C {
    IN  
        x[4], y[4], cin, // 4-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[4], cout, // 4-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

        PARTS:
        
        // selecting whether to set x and y to zeros
        Mux4(a=x, b=false, sel=zx, out=outzx);
        Mux4(a=y, b=false, sel=zy, out=outzy);

        // now handling nx, ny
        Not4(in=outzx, out=noutzx);
        Not4(in=outzy, out=noutzy);
        Mux4(a=outzx, b=noutzx, out=outzx2);
        Mux4(a=outzy, b=noutzy, out=outzy2);


        // And, combinging them ... handling f
        And4(a=outzx2, b=outzy2, out=andxy);
        FullAdder4(a=outzx2, b=outzy2, c=cin , sum=sumxy, cout=cout); 
        Mux4(a=andxy, b=sumxy, sel=f, out=outxy);


        // finally, negate the output
        Not4(in=outxy, out=noutxy);
        Mux4(a=outxy, b=noutxy, sel=no, out[3]=ng1, out[0..1]=part1, out[2..3]=part2, out=out);


        // if all of out = 0, then Or2Way(out[0..1]) or Or2Way(out[2..3]) is false ... 
        Or2Way(in=part1, out=or1);    // checking each 4-bit chunk for nonzero
        Or2Way(in=part2, out=or2);
        Or(a=or1, b=or2, out=nonzero);     // checking if any digits are nonzero; determine if the entire out is zero
        Xor(a=nonzero, b=true, out=zr);
        
        And(a=ng1, b=true, out=ng);   
          

        }
