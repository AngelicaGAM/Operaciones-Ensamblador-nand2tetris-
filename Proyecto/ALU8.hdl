//Chip ALU8

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU8 {
    IN  
        x[8], y[8], cin, // 8-bit inputs  
        BusALU[6];      
        /*zx,  zero the x input?  
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?*/

    OUT 
        out[8], cout, //8-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	                     //El carry que sale del primer ALU de 4, será el carry de entrada para el segundo ALU4 
	ALU4C(x=x[0..3], y=y[0..3], cin=cin, zx=BusALU[5], nx=BusALU[4], zy=BusALU[3], ny=BusALU[2], f=BusALU[1], no=BusALU[0], zr=zr1, ng=ng1,out=out[0..3], cout=cin1);  

	ALU4C(x=x[4..7], y=y[4..7], cin=cin1, zx=BusALU[5], nx=BusALU[4], zy=BusALU[3], ny=BusALU[2], f=BusALU[1], no=BusALU[0], zr=zr2, ng=ng2, out=out[4..7], cout=cout);  
    
    And(a=zr1, b=zr2, out=zr);  
    And(a=ng2, b=true, out=ng);   // ng2 bit más significativo 
    
	}